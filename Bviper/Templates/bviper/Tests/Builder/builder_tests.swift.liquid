//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import XCTest
@testable import {{ module_info.project_name }}

class {{ module_info.name }}ModuleConfiguratorTests: XCTestCase {

  override func setUp() {
    super.setUp()
    // Put setup code here. This method is called before the invocation of each test method in the class.
  }

  override func tearDown() {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    super.tearDown()
  }

  func testModuleBuilder() {
    // given

    // when
    let module = {{ module_info.name }}ModuleBuilder.setupModule(handler: nil)
    let viewController = module.viewController as! {{ module_info.name }}ViewController
    let input = module.input

    //then
    XCTAssertNotNil(viewController, "got nil viewController")

    XCTAssertNotNil(viewController.output, "{{ module_info.name }}ViewController is nil after builder")
    XCTAssertTrue(viewController.output is {{ module_info.name }}Presenter, "output is not {{ module_info.name }}Presenter")

    let presenter: {{ module_info.name }}Presenter = viewController.output as! {{ module_info.name }}Presenter
    XCTAssertNotNil(presenter.view, "view in {{ module_info.name }}Presenter is nil after builder")
    XCTAssertNotNil(presenter.router, "router in {{ module_info.name }}Presenter is nil after builder")
    XCTAssertTrue(presenter.router is {{ module_info.name }}Router, "router is not {{ module_info.name }}Router")

    let interactor: {{ module_info.name }}Interactor = presenter.interactor as! {{ module_info.name }}Interactor
    XCTAssertNotNil(interactor.output, "output in {{ module_info.name }}Interactor is nil after builder")

    let router = presenter.router as! {{ module_info.name }}Router
    XCTAssertNotNil(router.transitionHandler, "handler of router is nil after builder")
  }
}
